import asyncio
import os
import uuid
from aiogram import types, F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from utils.states import ConversionStates
from keyboards.inline import get_conversion_keyboard
from utils.helpers import sanitize_filename

router = Router()

@router.message(ConversionStates.waiting_for_link, F.text.startswith(('http://', 'https://')))
async def process_link(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(ConversionStates.waiting_for_choice)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=get_conversion_keyboard())

@router.message(ConversionStates.waiting_for_link)
async def process_wrong_link(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://")

@router.callback_query(ConversionStates.waiting_for_choice, F.data.in_(['convert_to_mp3', 'convert_to_voice']))
async def process_choice(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text(
        f"{callback.message.text}\n\n–í—ã–±—Ä–∞–Ω–æ: {'MP3' if callback.data == 'convert_to_mp3' else '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}")
    working_message = await callback.message.answer("‚è≥ –£–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º...")

    user_data = await state.get_data()
    link = user_data.get('link')
    choice = callback.data

    unique_id = str(uuid.uuid4())
    temp_mp3_path = f"downloads/{unique_id}.mp3"
    final_ogg_path = f"downloads/{unique_id}.ogg"
    files_to_delete = []

    try:
        proc_title = await asyncio.create_subprocess_shell(
            f'yt-dlp --get-title "{link}"',
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        stdout_title, stderr_title = await proc_title.communicate()
        if proc_title.returncode != 0: raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {stderr_title.decode()}")
        video_title = stdout_title.decode().strip()
        sanitized_title = sanitize_filename(video_title)

        if choice == 'convert_to_mp3':
            output_path = f"downloads/{sanitized_title}.mp3"
            files_to_delete.append(output_path)
            proc = await asyncio.create_subprocess_shell(
                f'yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 -o "{output_path}" "{link}"',
                stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            _, stderr = await proc.communicate()
            if proc.returncode != 0: raise Exception(f"yt-dlp error: {stderr.decode()}")
            await bot.send_audio(callback.from_user.id, FSInputFile(output_path, filename=f"{video_title}.mp3"))
            success_message = "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π MP3-—Ñ–∞–π–ª —É–ª–µ—Ç–µ–ª –≤ —á–∞—Ç. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â—ë –∑–≤—É–∫–æ–≤—ã—Ö –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–π ‚Äî –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è —Å–Ω–æ–≤–∞! üòâüöÄ"

        elif choice == 'convert_to_voice':
            proc_download = await asyncio.create_subprocess_shell(
                f'yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 -o "{temp_mp3_path}" "{link}"',
                stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            _, stderr_dl = await proc_download.communicate()
            if proc_download.returncode != 0: raise Exception(f"yt-dlp download error: {stderr_dl.decode()}")
            files_to_delete.append(temp_mp3_path)

            proc_convert = await asyncio.create_subprocess_shell(
                f'ffmpeg -i "{temp_mp3_path}" -c:a libopus "{final_ogg_path}"',
                stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            _, stderr_conv = await proc_convert.communicate()
            if proc_convert.returncode != 0: raise Exception(f"FFmpeg error: {stderr_conv.decode()}")
            files_to_delete.append(final_ogg_path)

            await bot.send_voice(callback.from_user.id, FSInputFile(final_ogg_path))
            success_message = "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–µ–ª–æ –≤ —á–∞—Ç. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â—ë –∑–≤—É–∫–æ–≤—ã—Ö –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É! üòâüöÄ"

        await bot.delete_message(chat_id=callback.from_user.id, message_id=working_message.message_id)
        await callback.message.answer(success_message)

    except Exception as e:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=working_message.message_id)
        await callback.message.answer(f"‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n`–û—à–∏–±–∫–∞: {e}`")
    finally:
        for file_path in files_to_delete:
            if os.path.exists(file_path):
                os.remove(file_path)
        await state.set_state(ConversionStates.waiting_for_link)