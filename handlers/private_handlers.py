# handlers/private_handlers.py
from aiogram import types, F, Router, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_conversion_keyboard
from services.converter import process_conversion

router = Router()


class UserState(StatesGroup):
    waiting_for_choice = State()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Mellot. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å."
    )


@router.message(F.chat.type == "private", F.text.startswith(('http://', 'https://')))
async def process_link_private(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(UserState.waiting_for_choice)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=get_conversion_keyboard())


@router.callback_query(UserState.waiting_for_choice, F.data.in_(['mp3', 'voice', 'mp4']))
async def process_choice_private(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    link = user_data.get('link')
    choice = callback.data

    if not link:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    await callback.message.delete()
    working_message = await bot.send_message(callback.from_user.id, "‚è≥ –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º...")

    success = await process_conversion(link=link, choice=choice, bot=bot, chat_id=callback.from_user.id)

    await working_message.delete()

    if success:
        final_messages = {
            'mp3': "‚úÖ –í–æ—Ç —Ç–≤–æ–π MP3 —Ñ–∞–π–ª! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –µ—â–µ, –ø—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫—É.",
            'voice': "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏—Å—ã–ª–∞–π –µ—â–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.",
            'mp4': "‚úÖ –¢–≤–æ–π MP4 —Ñ–∞–π–ª –≥–æ—Ç–æ–≤. –ó–∞—Ö–æ—á–µ—à—å –µ—â–µ –≤–∏–¥–µ–æ - —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å!"
        }
        await callback.message.answer(final_messages.get(choice, "‚úÖ –ì–æ—Ç–æ–≤–æ!"))

    await state.clear()